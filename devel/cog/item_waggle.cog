# Jedi Knight Cog Script
#
# ITEM_WAGGLE.COG
#
# INVENTORY Script - Waggle
#
# Controls the waggle mode
#
# [darthslaw]
#
# (C) 2007 JK ReCog


symbols

thing       player			local
int			wag=0			local

vector		waggle_vec0		local
vector		waggle_vec1		local
vector		waggle_vec2		local
vector		waggle_vec3		local
vector		waggle_vec4		local
vector		waggle_vec5		local
vector		waggle_vec6		local
vector		waggle_vec7		local
vector		waggle_vec8		local
vector		waggle_vec9		local
vector		waggle_vec10	local

flex		waggle_spd0		local
flex		waggle_spd1		local
flex		waggle_spd2		local
flex		waggle_spd3		local
flex		waggle_spd4		local
flex		waggle_spd5		local
flex		waggle_spd6		local
flex		waggle_spd7		local
flex		waggle_spd8		local
flex		waggle_spd9		local
flex		waggle_spd10	local

message		startup
message     activated

end

# ========================================================================================

code
startup:
	player = GetLocalPlayerThing();

	waggle_vec0 = '10 7 0';		// Regular JK
	waggle_vec1 = '2 5 0';		// Wide JK
	waggle_vec2 = '7 4 0';		// Narrow JK
	waggle_vec3 = '5 1 0';		// Ultra Narrow JK
	waggle_vec4 = '1 1 1';		// Small Waggle
	waggle_vec5 = '-10 7 0';	// Inverted
	waggle_vec6 = '-2 5 0';		// Wide Inverted
	waggle_vec7 = '-7 4 0';		// Narrow Inverted
	waggle_vec8 = '-5 1 0';		// Ultra Narrow Inverted
	waggle_vec9 = '-1 1 1';		// Small Inverted Waggle
	waggle_vec10 = '0 0 0';		// Off
	
	waggle_spd0 = 350;
	waggle_spd1 = 350;
	waggle_spd2 = 450;
	waggle_spd3 = 350;
	waggle_spd4 = 350;
	waggle_spd5 = 350;
	waggle_spd6 = 350;
	waggle_spd7 = 450;
	waggle_spd8 = 350;
	waggle_spd9 = 350;
	waggle_spd10 = 0;
	
	# x, y, z, s -- all the components of the jk waggle
	# Send initial values to all weapon cogs
	goto SendAllValues;		# NO CODE AFTER THIS LINE; 'GOTO' DOES NOT RETURN!
	Return;

activated:
	player = GetSourceRef();
	wag = wag + 1;
	if(wag > 10) wag = 0;

	if(wag == 0) print("Waggle: JK Upright");
	else if(wag == 1) print("Waggle: Wide Upright");
	else if(wag == 2) print("Waggle: Narrow Upright");
	else if(wag == 3) print("Waggle: Very Narrow Upright");
	else if(wag == 4) print("Waggle: Small Radius Upright");
	else if(wag == 5) print("Waggle: JK Inverted");
	else if(wag == 6) print("Waggle: Wide Inverted");
	else if(wag == 7) print("Waggle: Narrow Inverted");
	else if(wag == 8) print("Waggle: Very Narrow Inverted");
	else if(wag == 9) print("Waggle: Small Radius Inverted");
	else print("Waggle: Off");
	goto SendAllValues;		// send off the new waggle setting to all the weapons
	Return;

SendAllValues:
	SendMessageEx(GetInvCog(player, 1), user4,
		VectorX(waggle_vec0[wag]), VectorY(waggle_vec0[wag]), VectorZ(waggle_vec0[wag]), waggle_spd0[wag]);
	SendMessageEx(GetInvCog(player, 2), user4,
		VectorX(waggle_vec0[wag]), VectorY(waggle_vec0[wag]), VectorZ(waggle_vec0[wag]), waggle_spd0[wag]);
	SendMessageEx(GetInvCog(player, 3), user4,
		VectorX(waggle_vec0[wag]), VectorY(waggle_vec0[wag]), VectorZ(waggle_vec0[wag]), waggle_spd0[wag]);
	SendMessageEx(GetInvCog(player, 4), user4,
		VectorX(waggle_vec0[wag]), VectorY(waggle_vec0[wag]), VectorZ(waggle_vec0[wag]), waggle_spd0[wag]);
	SendMessageEx(GetInvCog(player, 5), user4,
		VectorX(waggle_vec0[wag]), VectorY(waggle_vec0[wag]), VectorZ(waggle_vec0[wag]), waggle_spd0[wag]);
	SendMessageEx(GetInvCog(player, 6), user4,
		VectorX(waggle_vec0[wag]), VectorY(waggle_vec0[wag]), VectorZ(waggle_vec0[wag]), waggle_spd0[wag]);
	SendMessageEx(GetInvCog(player, 7), user4,
		VectorX(waggle_vec0[wag]), VectorY(waggle_vec0[wag]), VectorZ(waggle_vec0[wag]), waggle_spd0[wag]);
	SendMessageEx(GetInvCog(player, 8), user4,
		VectorX(waggle_vec0[wag]), VectorY(waggle_vec0[wag]), VectorZ(waggle_vec0[wag]), waggle_spd0[wag]);
	SendMessageEx(GetInvCog(player, 9), user4,
		VectorX(waggle_vec0[wag]), VectorY(waggle_vec0[wag]), VectorZ(waggle_vec0[wag]), waggle_spd0[wag]);
	SendMessageEx(GetInvCog(player, 10), user4,
		VectorX(waggle_vec0[wag]), VectorY(waggle_vec0[wag]), VectorZ(waggle_vec0[wag]), waggle_spd0[wag]);
	return;

end

