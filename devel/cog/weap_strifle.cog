# Jedi Knight Cog Script
#
# WEAP_STRIFLE.COG
#
# WEAPON 3 script - Stormtrooper Rifle
#
# The standard rifle used by the stormtroopers.  Not as accurate as the Bryar Pistol.
# This weapon has only one type of fire.
#
# - Affected by MagSealed sectors/surfaces.
#
# This weapon now features the following fire modes:
#  Fire 1 = Slower fire rate, better precision, 1 energy unit per shot
#  Fire 2 = Faster fire rate, lessened precision, 2 energy units per shot
#  Fire 3 = Scope zoom
#
# [10/18/2006]
#   Added code that makes shots increase in error with each shot.
#
# [darthslaw]
#
# (C) 2007, JK ReCog

symbols

model       povModel=strv.3do                   local
model       weaponMesh=strg.3do                 local

keyframe    mountAnim=StrVmnt.key               local
keyframe    dismountAnim=StrVdis.key            local
keyframe    povfireAnim=StrVpst1.key            local
keyframe    holsterAnim=kyhlstr.key             local

sound       mountSound=df_rif_ready.wav         local
sound       dismountSound=PutWeaponAway01.wav   local
sound       fireSound=trprsht2.wav              local
sound       outSound=trprout.wav                local

#template    projectile=+stlaser                 local

thing       player                              local

vector      rVec                                local

flex        fireWait0=0.4                       local
flex        fireWait1=0.15                      local
flex        fireWaitZoomed=0.6                  local
flex        holsterWait                         local
flex        powerBoost                          local
flex		vol									local
#flex        autoAimFOV=25                       local

int         trackID=-1                          local
int         holsterTrack                        local
int         mode                                local

int			xhair_bin=119						local
int			hbob_bin=122						local
#int			style_bin=124						local

flex		err									local

int			waggle=0				local
vector		waggle_vec				local
flex		waggle_spd				local

template	cam_tpl=+timed_ghost	local
thing		cam						local
flex		zoom=0.0				local
flex		d_zoom					local
int			zoomdir=0				local
int			zoomed=0				local
int			zoommode=0				local	# 0 = auto, 1 = manual
int			pulsecount				local
int			zoom_color_handle=-1	local
int			zoomcount				local
int			scopeactive				local
flex		dist					local
thing		potential				local
flex		dot						local
flex		maxdot					local
thing		target					local

flex		head_offset				local

#template	crosshair3_tpl0_0=+crosshair_green_line_v		local
#template	crosshair3_tpl0_1=+crosshair_red_line_v			local
#template	crosshair3_tpl0_2=+crosshair_blue_line_v		local

#template	crosshair3_tpl1_0=+crosshair_green_line_h		local
#template	crosshair3_tpl1_1=+crosshair_red_line_h			local
#template	crosshair3_tpl1_2=+crosshair_blue_line_h		local

template	crosshair_scope=+crosshair_red_scope			local

#int			crosshair_style			local
#flex		offset					local
#vector		xhair_offset			local

message		startup
message		newplayer
message		killed
message     fire
message     activated
message     deactivated
message     selected
message     deselected
message     autoselect
message     timer
message		pulse
message		user4					# waggle control
message		user2					# start zoom
message		user3					# hold zoom

end

# ========================================================================================

code

startup:
newplayer:
	jkSetWaggle(player, '0 0 0', 0);
	waggle = 0;
	zoom_color_handle = -1;
	scopeactive = 0;
	call zoomreset;
	return;

killed:
	if(GetSenderRef() == GetLocalPlayerThing())	// player is the sender
	{
		call zoomreset;
	}
	return;

fire:
   player = GetSourceRef();
   mode = GetSenderRef();

   // Check that the player is still alive.
   if(GetThingHealth(player) <= 0)
   {
      Return;
   }

   // Check Ammo - If we are out, autoselect best weapon.
   // It should always use two energy cells, but -- as in DF --
   // allow the last fire if there is only one left...
   if(GetInv(player, 11) < 1.0)
   {
      PlaySoundThing(outSound, player, 1.0, -1, -1, 0x80);
      if((GetAutoSwitch() & 1))
         SelectWeapon(player, AutoSelectWeapon(player, 1));
      Return;
   }

   // Get random aiming error
   err = GetInv(player, xhair_bin);
   rVec = VectorSet((Rand()-0.5)*3 * err, (Rand()-0.5)*3 * err, 0.0);
   if(zoomed)
   {
   		if(mode == 0)
		{
			ChangeInv( player, 11, -5.0 );					//cost 5 ammo for sniper shots
			powerBoost = GetInv(player, 63);
			ChangeFireRate(player, fireWaitZoomed/powerBoost);
			// although we do not set a min error while firing zoomed, we can have some error from movement
			SendTrigger(-1, 3002, VectorX(rVec) / 2, VectorY(rVec) / 2, 1.0, 0.0);
			vol = zoom / 1.1;
			if(vol > 1) vol = 1;
			PlaySoundLocal(fireSound, vol, 0.0, 0x0);
			SetPOVShake('0.0 -.003 0.0', VectorScale(rVec, err + 0.1), .05, 80.0);
			PlaySoundThing(fireSound, player, 1.0, -1.0, -1.0, 0x80);
			PlayMode(player, 8);
			jkPlayPOVKey( player, povfireAnim, 1, 0x38 );
		}
		else
		{
			return;			// shouldn't get here, but if we do, just return;
		}
   }
	else
	{
		if(mode == 0)
		{	
			ChangeInv( player, 11, -1.0 );					//cost 1 ammo for slow shots
			ChangeInv( player, xhair_bin, 0.06 );			//increase error with each shot
		}
		else
		{
			ChangeInv( player, 11, -2.0 );					//cost 2 ammo for fast shots
			ChangeInv( player, xhair_bin, 0.2 );			//increase error with each shot
		}
		SendTrigger(-1, 3000, VectorX(rVec), VectorY(rVec), 1.0, 0.0);
		powerBoost = GetInv(player, 63);
		ChangeFireRate(player, fireWait0[mode]/powerBoost);
		SetPOVShake('0.0 -.003 0.0', VectorScale(rVec, err + 0.1), .05, 80.0);
		PlaySoundThing(fireSound, player, 1.0, -1.0, -1.0, 0x80);
		PlayMode(player, 8);
		jkPlayPOVKey( player, povfireAnim, 1, 0x38 );
	}

   Return;

# ........................................................................................

activated:
   player = GetSourceRef();
   mode = GetSenderRef();
	jkSetWaggle(player, '0 0 0', 0);
	waggle = 0;
   powerBoost = GetInv(player, 63);
	if(zoomed)
	{
		SendMessageEx(GetInvCog(player, xhair_bin), user0, 0.0, 0, 0, 0);
		if(mode == 1)
		{
			zoommode = 1 - zoommode;
			if(zoommode)
			{
				if(scopeactive)			// if the FIRE3 button is held now...
				{
					zoomdir = 1;		// zoom in
					pulsecount = 4;		// don't let the user tap out right now
					d_zoom = 4.0;		// zoom in
				}
				else					// Else, if FIRE3 button is not being pressed
				{
					zoomdir = 0;		// so that it will switch to 1 on next hotkey activation
					d_zoom = zoom;		// make sure we don't go anywhere now
				}
				#print("Manual Zoom Mode");
				jkStringClear();
				jkStringConcatAsciiString("Manual Zoom Mode");
				jkStringOutput(-1, -1);		// destination of -1 prints to local player only
			}
			else
			{
				#print("Automatic Zoom Mode");
				jkStringClear();
				jkStringConcatAsciiString("Automatic Zoom Mode");
				jkStringOutput(-1, -1);		// destination of -1 prints to local player only
			}
		}
		else
		{
			ActivateWeapon(player, fireWaitZoomed/powerBoost, mode);
		}
   	}
	else if(mode == 0)
	{
		SendMessageEx(GetInvCog(player, xhair_bin), user0, 0.3, 0, 0, 0);
		ActivateWeapon(player, fireWait0[mode]/powerBoost, mode);
	}
	else
	{
		SendMessageEx(GetInvCog(player, xhair_bin), user0, 0.7, 0, 0, 0);
		ActivateWeapon(player, fireWait0[mode]/powerBoost, mode);
	}
   Return;

# ........................................................................................

deactivated:
   player = GetSourceRef();
	jkSetWaggle(player, waggle_vec, waggle_spd);
	waggle = 1;
   DeactivateWeapon(player, mode);
   SendMessageEx(GetInvCog(player, xhair_bin), user0, 0.0, 0, 0, 0);
   Return;

# ........................................................................................

selected:
   player = GetSourceRef();
   PlayMode(player, 41);
   PlaySoundThing(mountSound, player, 1.0, -1, -1, 0x80);
   jkSetPOVModel(player, povModel);
   SetArmedMode(player, 1);
   jkSetWeaponMesh(player, weaponMesh);
	jkSetWaggle(player, waggle_vec, waggle_spd);
	waggle = 1;
   trackID = jkPlayPOVKey(player, mountAnim, 0, 20);
   SetMountWait(player, GetKeyLen(mountAnim));
   jkClearFlags(player, 0x5);
   SetCurWeapon(player, 3);
   SendMessageEx(GetInvCog(player, xhair_bin), user0, 0.0, 0, 0, 0);

   Return;

# ........................................................................................

deselected:
   player = GetSourceRef();
call zoomreset;
   PlaySoundThing(dismountSound, player, 1.0, -1, -1, 0x80);
   jkPlayPOVKey(player, dismountAnim, 0, 0x18);
   holsterWait = GetKeyLen(holsterAnim);
   SetMountWait(player, holsterWait);
   holsterTrack = PlayKey(player, holsterAnim, 1, 0x4);
   SetTimerEx(holsterWait, 2, 0.0, 0.0);
   if (trackID != -1)
   {
      jkStopPOVKey(player, trackID, 0);
      trackID = -1;
   }
	jkSetWaggle(player, '0 0 0', 0);
	waggle = 0;

   Return;

# ........................................................................................

autoselect:
   player = GetSourceRef();

   // If the player has the weapon
   if(GetInv(player, 3) != 0.0)
   {
      // If the player has ammo
      if(GetInv(player, 11) != 0.0)
      {
         ReturnEx(600.0);
      }
      else
      {
         ReturnEx(-1.0);
      }
   }
   else
   {
      ReturnEx(-1.0);
   }

   Return;

# ........................................................................................

timer:
   StopKey(player, holsterTrack, 0.0);
   Return;
   
user4:
	waggle_vec = VectorSet(GetParam(0), GetParam(1), GetParam(2));
	waggle_spd = GetParam(3);
	if(waggle) jkSetWaggle(player, waggle_vec, waggle_spd);
	Return;

pulse:
	pulsecount = pulsecount + 1;
	zoomcount = zoomcount + 1;
	if(zoomcount > 5) zoomcount = 0;

	if(GetCurrentCamera() == 1) CycleCamera();	// force internal view
	if(zoommode == 1)		// MANUAL zoom mode
	{ #print("Manual zoom pulse");
		if(zoom < d_zoom)						// if we can still zoom in
		{ #print("zooming in");
			zoom = zoom + 0.01 * pulsecount;
			if(zoom > d_zoom) zoom = d_zoom;	// if we zoomed in too far
		}
		else if(zoom > d_zoom)					// if we can still zoom out
		{ #print("zooming out");
			zoom = zoom - 0.01 * pulsecount;
			if(zoom < d_zoom) zoom = d_zoom;	// if we zoomed out too far
		}
		if(zoom < 0.25)							// if we zoomed all the way out, exit scope mode
		{ #print("exit zoom mode");
			call zoomreset;
			return;
		}
	}
	else					// AUTO zoom mode
	{
		if(zoomcount == 0)	// only auto zoom so often...
		{
			potential = FirstThingInView(player, 10, 100, 0x404);
			maxdot = 0;
			target = -1;
			while(potential != -1)
			{
				dot = ThingViewDot(player, potential);
				// if potential can be seen, is not the player himself, is most directly in front, and is not dying
				if(
					(HasLOS(player, potential)) &&
					(potential != player) &&
					(dot > maxdot) &&
					!(GetThingFlags(potential) & 0x200)
				)
				{
					maxdot = dot;
					target = potential;
				}
				potential = NextThingInView();
			}
			if(target != -1)
			{
				dist = VectorDist(GetThingPos(player), GetThingPos(target));
				// various zoom levels
				if(dist > 4.25) d_zoom = 4.00;
				else if(dist > 4.00) d_zoom = 3.75;
				else if(dist > 3.75) d_zoom = 3.50;
				else if(dist > 3.50) d_zoom = 3.25;
				else if(dist > 3.25) d_zoom = 3.00;
				else if(dist > 3.00) d_zoom = 2.75;
				else if(dist > 2.75) d_zoom = 2.50;
				else if(dist > 2.50) d_zoom = 2.25;
				else if(dist > 2.25) d_zoom = 2.00;
				else if(dist > 2.00) d_zoom = 1.75;
				else if(dist > 1.75) d_zoom = 1.50;
				else if(dist > 1.50) d_zoom = 1.25;
				else if(dist > 1.25) d_zoom = 1.00;
				else if(dist > 1.00) d_zoom = 0.75;
				else if(dist > 0.75) d_zoom = 0.50;
				else d_zoom = 0.25;
				#jkStringClear();
				#jkStringConcatAsciiString("dist: ");
				#jkStringConcatFlex(dist);
				#jkStringConcatAsciiString(" ; d_zoom: ");
				#jkStringConcatFlex(d_zoom);
				#jkStringConcatAsciiString(" ; thing: ");
				#jkStringConcatInt(target);
				#jkstringOutput(-3, -1);
			}
			else
			{
				d_zoom = 0.25;		// zoom to 0.25
			}
		}
		if(zoom < d_zoom)
		{
			zoom = zoom + 0.2;
			if(zoom > d_zoom) zoom = d_zoom;
		}
		else if(zoom > d_zoom)
		{
			zoom = zoom - 0.2;
			if(zoom < d_zoom) zoom = d_zoom;
		}
	}
	head_offset = GetInv(player, hbob_bin);
	cam = FireProjectile(player, cam_tpl, -1, -1, VectorSet(0, zoom, 0.04 + head_offset), '0 0 0', 0, 0, 0, 0);
	SetThingPos(cam, VectorAdd(GetThingPos(cam), VectorScale(GetThingLVec(cam), -0.1)));
	SetCameraFocus(0, cam);
	FireProjectile(cam, crosshair_scope, -1, -1, '0 0.05 0', '0 0 0', 0, 0, 0, 0);
	if(IsInvActivated(player, 23))
		EnableIRMode(1.0, 1.0);		// force seeing will give us a fully lit view
	else
		EnableIRMode(0.3, 1.0);		// else, dimmed level, fully lit things
	return;

user2:
	scopeactive = 1;
	if(zoommode == 1)		// Manual
	{
		if(zoomed)						// if zoomed, tell the pulse to start zooming in/out
		{
			pulsecount = 0;
			zoomcount = 0;
			zoomdir = 1 - zoomdir;
			if(zoomdir == 1) d_zoom = 4.0;	// zoom toward 4.0
			else d_zoom = 0.0;				// zoom toward 0.0
		}
		else
		{
			call startzoom;			// else, start the zoom
			d_zoom = 4.0;
		}
	}
	else					// Auto
	{
		if(zoomed) call zoomreset;		// if we hit the button while zoomed in auto mode, zoom out
		else call startzoom;			// else, start the zoom
	}
	return;

user3:
	scopeactive = 0;
	if(zoommode == 1)
	{
		d_zoom = zoom;		// stop zooming
		if(pulsecount < 4)
		{
			#print("Tapped button... zooming out");
			call zoomreset;
		}
	}
	// Auto zoommode (mode 0) only receives on/off toggle messages in user2... nothing to do here in user3 
	return;

startzoom:
	zoom = 0.25;
	d_zoom = 0.25;
	zoomdir = 1;
	zoomed = 1;
	pulsecount = 3;
	zoomcount = 0;
	SetPulse(0.01);
	if(zoom_color_handle != -1) FreeColorEffect(zoom_color_handle);
	zoom_color_handle = newColorEffect(1, 0, 0, 0, 0, 0, 0, 0, 0, 1.0);
	if(IsInvActivated(player, 23))
		EnableIRMode(1.0, 1.0);		// force seeing will give us a fully lit view
	else
		EnableIRMode(0.3, 1.0);		// else, dimmed level, fully lit things
	return;

zoomreset:
	zoomed = 0;
	zoom = 0.0;
	zoomdir = 0;
	SetCameraFocus(0, GetLocalPlayerThing());
	SetPulse(0);
	if(zoom_color_handle != -1) FreeColorEffect(zoom_color_handle);
	zoom_color_handle = -1;
	// Don't disable IR mode if IR Goggles or Force Seeing are on...
	if(!IsInvActivated(player, 41) && !IsInvActivated(player, 23))
		DisableIRMode();
	return;
	
end

