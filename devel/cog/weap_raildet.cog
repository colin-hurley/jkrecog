# Jedi Knight Cog Script
#
# WEAP_RAILDET.COG
#
# WEAPON 7 Script - Rail Detonator Gun
#
# This is a missile launcher type of weapon. It sends out an explosive device with
#  two options, impact or trigger explosion. The charge with the trigger option will
#  stick to a wall.
#
# - Not affected by MagSealed sectors/surfaces.
#
# [darthslaw]
#
# (C) 2007 JK ReCog


symbols

model       povModel=rldv.3do                   local
model       weaponMesh=rldg.3do                 local
sound       mountSound=RailChargeArm01.WAV      local
sound       dismountSound=PutWeaponAway01.wav   local
sound       fireSound=RailChargeFire01.WAV      local
sound       outSound=RailChargeEmpty01.WAV      local

thing       player                              local

keyframe    mountAnim=RldVmnt.key               local
keyframe    dismountAnim=RldVdis.key            local
keyframe    povfireAnim=RldVpst1.key            local
keyframe    holsterAnim=kyhlstr.key             local

#template    projectile=+raildet                 local
#template    projectile2=+raildet2               local

#thing       rail                                local

flex        fireWait=1.0                        local
flex        powerBoost                          local
#flex        autoAimFOV=25                       local
#flex        autoAimMaxDist=5                    local
flex        holsterWait                         local

#keyframe    railAnim=rld0anim.key               local

int         trackID=-1                          local
int         mode                                local
int         holsterTrack                        local

int         selectMode=1                        local

int			xhair_bin=119						local
flex		err									local

vector		rVec					local

int			waggle=0				local
vector		waggle_vec				local
flex		waggle_spd				local

message     activated
message     deactivated
message     selected
message     deselected
message		startup
message     newplayer
message     autoselect
message     fire
message     timer
message		user4					# waggle control

end

# ========================================================================================

code

startup:
newplayer:
	jkSetWaggle(player, '0 0 0', 0);
	waggle = 0;
	return;

fire:
   player = GetSourceRef();
   mode = GetSenderRef();

   // Check that the player is still alive.
   if(GetThingHealth(player) <= 0)
   {
      Return;
   }

   // Check Ammo - If we are out, autoselect best weapon.
   if(GetInv(player, 15) < 1.0)
   {
      PlaySoundThing(outSound, player, 1.0, -1, -1, 0x80);
      if(GetAutoSwitch() & 1)
         SelectWeapon(player, AutoSelectWeapon(player, 1));
      Return;
   }
	// Get random aiming error
	err = GetInv(player, xhair_bin);
   jkPlayPOVKey(player, povfireAnim, 1, 0x38);
   SetPOVShake('0.0 -.01 0.0', '4.0 0.0 0.0', .05, 80.0);

	PlaySoundThing(fireSound, player, 1.0, -1, -1, 0x80);
	PlayMode(player, 18);
#	rail = FireProjectile(player, projectile[mode], fireSound, 18, '0.0214 0.15 0.00', VectorSet((rand()-0.5)*(err+0.25)*6, (rand()-0.5)*(err+0.25)*6, 0), 1.0, 0x20, autoAimFOV, autoAimFOV*2);
	// make more accurate when crouched
	if(!IsThingCrouching(player))
		rVec = VectorSet(
			(rand()-0.5)*3*(err+3.5),
			(rand()-0.5)*3*(err+3.5),
			0
		);
#		SetThingRotVel(rail, VectorSet((rand()-0.5)*12*(err+0.2), (rand()-0.5)*12*(err+0.2), 0));
	else	// if crouching
		rVec = VectorSet(
			(rand()-0.5)*2*(err+2.6),
			(rand()-0.5)*2*(err+2.6),
			0
		);
#		SetThingRotVel(rail, VectorSet((rand()-0.5)*10*(err+0.5), (rand()-0.5)*10*(err+0.5), 0));

	if(mode == 0) SendTrigger(-1, 7000, VectorX(rVec), VectorY(rVec), VectorZ(rVec), 0.0);
	else SendTrigger(-1, 7001, VectorX(rVec), VectorY(rVec), VectorZ(rVec), 0.0);


#   if((mode == 1) && (rail != -1))
#   {
#      PlayKey(rail, railAnim, 1, 20);
#   }

   // Provide a kick backwards
   ApplyForce(player, VectorScale(GetThingLVec(player), -40));

   ChangeInv(player, 15, -1.0);
   ChangeInv(player, xhair_bin, 0.75);	// error after shot

   powerBoost = GetInv(player, 63);
   ChangeFireRate(player, fireWait/powerBoost);

   Return;

# ........................................................................................

activated:
   player = GetSourceRef();
   mode = GetSenderRef();
	jkSetWaggle(player, '0 0 0', 0);
	waggle = 0;
   powerBoost = GetInv(player, 63);
   ActivateWeapon( player, fireWait/powerBoost, mode );
   Return;

# ........................................................................................

deactivated:
   player = GetSourceRef();
   mode = GetSenderRef();
	jkSetWaggle(player, waggle_vec, waggle_spd);
	waggle = 1;
   DeactivateWeapon( player, mode );
   Return;

# ........................................................................................

selected:
   player = GetSourceRef();

   PlayMode(player, 41);
   PlaySoundThing(mountSound, player, 1.0, -1, -1, 0x80);
   jkSetPOVModel(player, povModel);
   SetArmedMode(player, 1);
   jkSetWeaponMesh(player, weaponMesh);
	jkSetWaggle(player, waggle_vec, waggle_spd);
	waggle = 1;

   trackID = jkPlayPOVKey(player, mountAnim, 0, 20);
   SetMountWait(player, GetKeyLen(mountAnim));
   jkClearFlags(player, 0x5);
   SetCurWeapon(player, 7);

   // Check Ammo - If we are out, autoselect best weapon.
   if(GetInv( player, 15 ) < 1.0)
   {
      PlaySoundThing(outSound, player, 1.0, -1, -1, 0x80);
      if(GetAutoSwitch() & 1)
         SelectWeapon(player, AutoSelectWeapon(player, 1));
   }

   Return;

# ........................................................................................

deselected:
   player = GetSourceRef();

   PlaySoundThing(dismountSound, player, 1.0, -1, -1, 0x80);
   jkPlayPOVKey( player, dismountAnim, 0, 18 );

   holsterWait = GetKeyLen(holsterAnim);
   SetMountWait(player, holsterWait);
   holsterTrack = PlayKey(player, holsterAnim, 1, 0x4);
   SetTimerEx(holsterWait, 2, 0.0, 0.0);
   if (trackID != -1)
   {
      jkStopPOVKey( player, trackID, 0 );
      trackID = -1;
   }
	jkSetWaggle(player, '0 0 0', 0);
	waggle = 0;

   Return;

# ........................................................................................

//newplayer:
//   player = GetSourceRef();
//
//   // Make sure that if the player is respawning, the old mount isn't playing anymore.
//   if (trackID != -1)
//      jkStopPOVKey(player, trackID, 0);
//
//   Return;

# ........................................................................................

autoselect:
   selectMode = GetSenderRef();
   player = GetSourceRef();

   // If the player has the weapon
   if(GetInv(player, 7) != 0.0)
   {
      // If the player has ammo
      if(GetInv(player, 15) != 0.0)
      {

         // query for ammo
         if(selectMode == -1)
         {
            ReturnEx(900.0);
            Return;
         }

         if((selectMode == 0) && !(GetAutoPickup() & 2))
         {
            ReturnEx(900.0);
            Return;
         }

         if((selectMode == 1) && !(GetAutoSwitch() & 2))
         {
            ReturnEx(900.0);
            Return;
         }

         if((selectMode == 2) && !(GetAutoPickup() & 2))
         {
            ReturnEx(900.0);
            Return;
         }

         ReturnEx(-2.0);
         Return;

      }
      else
      {
         ReturnEx(-1.0);
         Return;
      }
   }
   else
   {
      ReturnEx(-1.0);
   }

   Return;

# ........................................................................................

timer:
   StopKey(player, holsterTrack, 0.0);
   Return;
   
user4:
	waggle_vec = VectorSet(GetParam(0), GetParam(1), GetParam(2));
	waggle_spd = GetParam(3);
	if(waggle) jkSetWaggle(player, waggle_vec, waggle_spd);
	Return;

end


