# Jedi Knight Cog Script
#
# ACTOR_RB.COG
#
# ACTOR Script - Ree Yees with Blaster
#
# 7/28/97 [CR] Doubled saber damage for single player gameplay reasons
# 3/7/07 [darthslaw] Modified to punch player after being force-pulled
#
# [darthslaw]
#
# (C) 2007 JK ReCog


symbols

message		startup
message     killed
message     damaged
message     skill
message		pulse
message		timer

template    powerup=+DSTRifle                local
template    dummybrownRY=reeyeesGUN          local
template    limb=+RYlimb                     local
template    limbblack=+RHlimb                local
thing       newThing                         local
thing       victim                           local
int         bin                              local
int         senderref=-1                     local
#ai          flee_ai=noweapon.ai              local
ai			punch_ai=rypundefault.ai		local
template	punch_tpl=+ry_punch				local
int         damage                           local

thing		bullet							local
vector		bulletpos						local
vector		partpos							local
vector		diff							local
vector		head_offset						local
flex		r								local
template	ghost_tpl=+timed_ghost			local

template	fire_tpl=+TD_flame_pars			local
template	sourcetpl						local
template	TD_expl_tpl0=+grenade_exp		local
template	TD_expl_tpl1=+egrenade_exp		local
vector		vel								local

end

# ========================================================================================

code

startup:
	head_offset = '0.01 0.02 0.04';
	return;

damaged:
   damage = GetParam(0);
   victim = GetSenderRef();
   if(GetParam(1) == 16)                     // saber damage might cause dismemberment
   {
      damage = (damage * 2.0);
      if(GetThingHealth(victim) <= damage) // but only if damage is sufficient to kill
      {
         if(rand() < 0.05)                   // random chance
         {
            AmputateJoint(victim, 5);

            if(GetThingTemplate(victim) == dummybrownRY) // we have a brown ree yees
               newThing = CreateThingAtPos(limb, GetThingSector(victim), GetThingPos(victim), '0 0 0');
            else
               newThing = CreateThingAtPos(limbblack, GetThingSector(victim), GetThingPos(victim), '0 0 0');

            SetThingVel(newThing, '0.0 0.7 1.4');
         }
      }
   }
	else
	if(GetParam(1) == 2)					// ENERGY DAMAGE
	{
		bullet = GetSourceRef();
		if(GetThingType(bullet) == 3)			// type = weapon
		{
			#print("energy damage");
			// First check for head shots
			bulletpos = GetThingPos(bullet);
			NewThing = FireProjectile(GetSenderRef(), ghost_tpl, -1, -1, head_offset, '0 0 0', 0, 0, 0, 0);
			partpos = GetThingPos(NewThing);
			DestroyThing(NewThing);
			diff = VectorSub(partpos, bulletpos);
			r = VectorLen(VectorCross(diff, GetThingLVec(bullet)));	// will projectile hit the head?
			if(r <= 0.03)	// 0.02 = radius of head // VectorZ(diff) < 0.03 && 
			{
				#print("Head shot");
				damage = damage * 5;
			}
		}
	}
	else
	if(GetParam(1) == 4)					// FIRE damage
	{
		bullet = GetSourceRef();
		sourcetpl = GetThingTemplate(bullet);
		if(sourcetpl == TD_expl_tpl0 || sourcetpl == TD_expl_tpl1)
		{
			// incinerate victim if he is close enough to the blast and has died from it
			if(VectorDist(GetThingPos(victim), GetThingPos(bullet)) < 0.5 && GetHealth(victim) <= damage)
			{
				damage = 10 * damage;				// make sure the actor really dies
				SetThingCurGeoMode(victim, 0);
				StopThing(victim);
				DetachThing(victim);
				ClearPhysicsFlags(victim, 0x41);
				SetThingVel(victim, '0 0 0.4');			// so he doesn't crumple to the ground before the timer can re-clear the physics flags
				SetTimerEx(1.1, 2, victim, 0);
				newThing = FireProjectile(victim, fire_tpl, -1, -1, '0 0 0', '0 0 0', 0, 0, 0, 0);
				vel = VectorScale(VectorNorm(VectorSub(GetThingPos(victim), GetThingPos(bullet))), 0.5);
				// scale down the Z velocity... looks better this way
				vel = VectorAdd(vel, VectorSet(0, 0, -0.9 * VectorZ(vel)));
				SetThingVel(newThing, vel);
			}
		}
	}
	else if(GetParam(1) == 64)				// SURFACE IMPACT DAMAGE
	{
		// Stop the victim's movement if damaged by impact
		StopThing(victim);
		#print("Damaged by impact; Stopping thing movement");
	}

   ReturnEx(damage);
   return;

# ........................................................................................

killed:
   victim = GetSenderRef();
	SetThingPulse(victim, 0);	// no need to keep pulsing at this point...
   if(GetActorWeapon(victim, 1) != punch_tpl)
   {
      AmputateJoint(victim, 3);
      newThing = FireProjectile(victim, powerup, -1, -1, '0.03 0.03 -0.01', '0 0 0', 0, 0, 0, 0);
      SetThingVel(newThing, VectorAdd(VectorScale(GetThingLVec(newThing), 0.4), '0 0 0.4'));
      SetLifeleft(newThing, 200.0);
      SetThingLook(newThing, GetThingLVec(victim));
   }

   return;

# ........................................................................................

skill:
   bin = GetParam(0);
   if (bin == 24)                            // Force Pull
   {
      senderref = GetSenderRef();
      newThing = CreateThing(powerup, senderref);
      SetLifeleft(newThing, 30.0);
      ReturnEx(newThing);

		// Instead of fleeing the player, make this ree-yees punch
		#AISetClass(senderref, flee_ai);
		#AIFlee(senderref, GetLocalPlayerThing());
		SetTimerEx(0.1, 10, senderref, 0);
		SetThingPulse(senderref, 5);	// make the pulse repeat these changes, for savegame's sake 
		return;
   }
   else
   if (bin == 31)                            // Force Grip
   {
      ReturnEx(10);                          // return base damage that is taken by this actor.
      return;
   }
   else
   if (bin == 34)                            // Deadly Sight
   {
      ReturnEx(5);                           // return base damage that is taken by this actor.
      return;
   }

   ReturnEx(-1);
   return;

pulse:
	// pulse these changes so a loaded game will have the changes, too
	AISetClass(GetSenderRef(), punch_ai);
	SetActorWeapon(GetSenderRef(), 1, punch_tpl);
	SetActorFlags(GetSenderRef(), 0x20000);
	ParseArg(GetSenderRef(), "puppet=ryfist.pup soundclass=ryfist.snd");
	return;

timer:
	if(GetSenderID() == 2)
	{
		DetachThing(GetParam(0));
		ClearPhysicsFlags(GetParam(0), 0x41);
		StopThing(GetParam(0));
		return;
	}
	if(GetSenderID() == 10)
	{
		AISetClass(GetParam(0), punch_ai);
		SetActorWeapon(GetParam(0), 1, punch_tpl);
		SetActorFlags(GetParam(0), 0x20000);
		ParseArg(GetParam(0), "puppet=ryfist.pup soundclass=ryfist.snd");
		return;
	}
	return;
end


