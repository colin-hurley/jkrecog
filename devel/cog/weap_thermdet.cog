# Jedi Knight Cog Script
#
# WEAP_THERMDET.COG
#
# WEAPON 4 Script - Thermal Detonator
#
# Fun to use and handy for clearing some elbow room.  Not recommending
#  for those with noodle arms. The longer you hold down the fire key
#  (CTRL/Z) the farther you throw the detonator.
#
# Fire 1 makes it explode on impact.
# Fire 2 throws the detonator with the 3 second delay.
# Fire 3 activates the dead man switch.  If you are killed while holding the switch, the
#  detonator will explode.
#
# The explosion is now larger and more powerful, so be careful!
#
# - Not affected by MagSealed sectors/surfaces.
#
# [darthslaw]
#
# (C) 2007 JK ReCog
# ========================================================================================

symbols

model       povModel=detv.3do             local
model       weaponMesh=detg.3do           local

keyframe    mountAnim=detvmnt.key         local
keyframe    dismountAnim=detvdis.key      local
keyframe    povFireAnim=detvpst1.key      local
keyframe    prePOVThrowAnim=detvpre1.key  local
#keyframe   preThrowAnim=kyrthro0.key     local
keyframe    holsterAnim=kyhlstr.key       local

template    projectile=+grenade1          local
template    projectile1=+grenade2         local

sound       throwSound=ThermalThrow01.wav local
sound       clickSound=ThermClick01.wav   local
sound       clickSound2=ThermClick02.wav  local
sound       loopSound=ThermLoop02.wav     local

flex        delayTime=1.0                 local
flex        throwWait=0.8                 local
flex        mountWait                     local
#flex        autoAimFOV=10                 local
#flex        autoAimMaxDist=5              local
flex        holsterWait                   local

thing       player                        local

int         preThrowTrack                 local
int         selectTrack                   local
int         prePOVThrowTrack              local
int         mode                          local
int         cocked=0                      local
int			deadman=0						local
int			channel=-1						local
int         holsterTrack                  local
#int			cockTrack=-1				local
#int			povCockTrack=-1				local

int         selectMode=1                  local

int			waggle=0				local
vector		waggle_vec				local
flex		waggle_spd				local

message     startup
message     activated
message     deactivated
message     selected
message     deselected
message     autoselect
message     timer
message     newplayer
message		killed
message     user2
message     user3
message		user4

end

# ========================================================================================

code

startup:
   // Setup delays and variables.
   mountWait    = GetKeyLen(mountAnim);
	holsterWait = GetKeyLen(holsterAnim);
   preThrowTrack=-1;
   selectTrack=-1;
   prePOVThrowTrack=-1;
   #cockTrack = -1;
   #POVCockTrack = -1;
   deadman = 0;
   cocked = 0;
	jkSetWaggle(player, '0 0 0', 0);
	waggle = 0;
   Return;

# ........................................................................................

activated:
   player = GetSourceRef();
   mode = GetSenderRef();
   if (mode > 1)
      Return;
    killTimerEx(20);	// no fire 3 allowed now
    cocked = 1;
	jkSetWaggle(player, '0 0 0', 0);
	waggle = 0;
   PlaySoundThing(clickSound[mode], player, 1.0, -1.0, -1.0, 0x80);

   // Cock arm back for throw.
   if(preThrowTrack == -1 && prePOVThrowTrack == -1)
   {
      prePOVThrowTrack = jkPlayPOVKey(player, prePOVThrowAnim, 1, 0x14);
      preThrowTrack = PlayMode( player, 38 );
      ActivateWeapon(player, 0, mode);
   }
   Return;

# ........................................................................................

deactivated:
   player = GetSourceRef();
   mode = GetSenderRef();

   delayTime = DeactivateWeapon(player, mode);        // allow activated messages again.

   // Make sure both keys are up before continuing.
   if (GetCurWeaponMode() != -1)
      Return;

   // Set maximum scale factor (2 second hold.)
   if(delayTime > 2)
      delayTime = 2;

   // Set minimum scale factor
   if(mode == 0)
   {
      if(delayTime < 0.7) delayTime = 0.7;
   }
   else
   {
      if(delayTime < 0.25) delayTime = 0.25;
   }

   if(preThrowTrack != -1 && prePOVThrowTrack != -1)
   {
      jkStopPOVKey(player, prePOVThrowTrack, 0);
      StopKey(player, preThrowTrack, 0);
      preThrowTrack = -1;
      prePOVThrowTrack = -1;
   }

   // Throw the appropriate detonator.
   SetPOVShake('0.0 -.003 0.0', '0.5 0.0 0.0', .05, 40.0);
   jkPlayPOVKey(player, povfireAnim, 1, 0x38);
   PlaySoundThing(throwSound, player, 1.0, 0.5, 2.5, 0x80);
   FireProjectile(player, projectile[mode], -1, 15, '0.05 0 0', '0 0 0', delayTime, 0x1, 0.0, 0.0);
   ChangeInv(player, 4, -1.0);
   SetMountWait(player, throwWait);
   SetTimerEx(throwWait, 20, 0, 0);	// timer to disable "cocked"

   // If out of ammo try to autoswitch to another weapon
   // if autoswitch is enabled else just switch to fists.
   if(GetInv(player, 4) < 1)
   {
      if(GetAutoSwitch() & 1)
      {
         SelectWeapon(player, AutoSelectWeapon(player, 1));
      }
      else
      {
         SelectWeapon(player, 1);
      }
   }

	jkSetWaggle(player, '0 0 0', 0);
	waggle = 0;
   SetTimerEx(throwWait, 0, 0, 0);

   Return;

# ........................................................................................

timer:
   if (GetSenderId() == 0)
   {
		// Start waggling after the throw.
		jkSetWaggle(player, waggle_vec, waggle_spd);
		waggle = 1;
   }
   else
   if (GetSenderId() == 2)
   {
      StopKey(player, holsterTrack, 0.0);
   }
   else
   if(GetSenderID() == 20)
   {
		cocked = 0;
   }
   else
   if(GetSenderID() == 35)
   {
   		SendTrigger(-1, 4005, 0, 0, 0, 0);		// trigger the client to make a TD explosion
   }
   Return;

# ........................................................................................

selected:
   player = GetSourceRef();

	jkSetWaggle(player, waggle_vec, waggle_spd);
	waggle = 1;

   // Play external mounting animation
   PlayMode(player, 40);

   // Setup the meshes and models.
   jkSetPOVModel(player, povModel);
   SetArmedMode(player, 0);
   jkSetWeaponMesh(player, weaponMesh);

   // Play the animation (NOLOOP + UNIQUE + ENDPAUSE).
   // The animation is held at the last frame after it is played.
   selectTrack = jkPlayPOVKey(player, mountAnim, 0, 0x14);
   SetMountWait(player, mountWait);
    cocked = 1;
    SetTimerEx(mountWait, 20, 0, 0);		// this timer will set "cocked" to 0
   // Clear Lightsaber flag, and enable activation messages.
   jkClearFlags(player, 0x5);
   SetCurWeapon(player, 4);
   SetMountWait(player, mountWait);

   Return;

# ........................................................................................

deselected:
   player = GetSourceRef();

   jkPlayPOVKey(player, dismountAnim, 0, 18);
    cocked = 1;			// dont allow fire 3 to be activated
   SetMountWait(player, holsterWait);
   holsterTrack = PlayKey(player, holsterAnim, 1, 0x4);
   SetTimerEx(holsterWait, 2, 0.0, 0.0);
   if(selectTrack != -1)
   {
      jkStopPOVKey(player, selectTrack, 0);
      selectTrack = -1;
   }
	jkSetWaggle(player, '0 0 0', 0);
	waggle = 0;
   KillTimerEx(0);

   if(preThrowTrack != -1 && prePOVThrowTrack != -1)
   {
      jkStopPOVKey(player, prePOVThrowTrack, 0);
      StopKey(player, preThrowTrack, 0);
      preThrowTrack = -1;
      prePOVThrowTrack = -1;
   }

   Return;

# ........................................................................................

autoselect:
   selectMode = GetSenderRef();
   player = GetSourceRef();

   // If the player has ammo
   if(GetInv(player, 4) != 0)
   {

      // query for ammo
      if(selectMode == -1)
      {
         ReturnEx(400.0);
         Return;
      }

      if((selectMode == 0) && !(GetAutoPickup() & 2))
      {
         ReturnEx(400.0);
         Return;
      }

      if((selectMode == 1) && !(GetAutoSwitch() & 2))
      {
         ReturnEx(400.0);
         Return;
      }

      if((selectMode == 2) && !(GetAutoPickup() & 2))
      {
         ReturnEx(400.0);
         Return;
      }

      ReturnEx(-2.0);
      Return;

   }
   else
   {
      ReturnEx(-1.0);
   }

   Return;

# ........................................................................................

newplayer:
	deadman = 0;
   if(preThrowTrack != -1 && prePOVThrowTrack != -1)
   {
      jkStopPOVKey(player, prePOVThrowTrack, 0);
      StopKey(player, preThrowTrack, 0);
      preThrowTrack = -1;
      prePOVThrowTrack = -1;
   }
   Return;

# ........................................................................................

killed:
	if(deadman && GetSenderRef() == GetLocalPlayerThing())
	{
		SetTimerEx(rand() * 0.5 + 0.1, 35, 0, 0);	// a delay until the deadman switch is released by dying player
	}
	return;

user2:
	if(cocked || deadman) return;	// dont run this code if fire 1 or 2 are active or if the DM switch is already on
	#print("Enable DM switch");
	player = getLocalPlayerThing();
	deadman = 1;
	if(channel != -1)
	{
		StopSound(channel, 0);
	}
	channel = PlaySoundThing(loopSound, player, 1.0, -1.0, -1.0, 0x81);
	PlaySoundThing(clickSound, player, 1.0, -1.0, -1.0, 0x80);
	#POVCockTrack = jkPlayPOVKey(player, prePOVThrowAnim, 1, 0x14);
	#CockTrack = PlayMode( player, 38 );
	jkSetWaggle(player, '0 0 0', 0);
	waggle = 0;
	SetMountWait(player, 36000);	// don't let player fire until we tell him he can
	return;

user3:
	if(!deadman) return;			// if the DM switch is not active, we shouldn't deactivate it
	#print("Disable DM switch");
	SetBinWait(player, 130, 0.5);
	deadman = 0;
	if(channel != -1)
	{
		StopSound(channel, 0);
		channel = -1;
	}
	#if(POVCockTrack != -1)
	#{
	#	StopKey(player, CockTrack, 0);
	#	CockTrack = -1;
	#}
	#if(CockTrack != -1)
	#{
	#	StopKey(player, POVCockTrack, 0);
	#	POVCockTrack = -1;
	#}
	PlaySoundThing(clickSound, player, 1.0, -1.0, -1.0, 0x80);
	jkSetWaggle(player, waggle_vec, waggle_spd);
	waggle = 1;
	SetMountWait(getLocalPlayerThing(), 0.5);
	return;

user4:
	waggle_vec = VectorSet(GetParam(0), GetParam(1), GetParam(2));
	waggle_spd = GetParam(3);
	if(waggle) jkSetWaggle(player, waggle_vec, waggle_spd);
	Return;

end


