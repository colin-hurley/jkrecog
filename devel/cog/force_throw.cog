# Jedi Knight Cog Script
#
# FORCE_THROW.COG
#
# FORCEPOWER Script - Force Throw
#  Dark Side Power
#  Bin 30
#
# [darthslaw]
#
# (C) 2007 JK ReCog


symbols

thing       player                           local
thing       debris=-1                       local

flex        mana                             local
flex        maxDot                           local
flex        dot                              local
flex        cost=30                           local # 30 mana / second
int         rank                             local

vector      dir                             local
flex		len								local

int			changing						local
int			changedir						local
flex		range=0.5						local

sound       throwSound=ForceThrow01.WAV      local

template	ghost_tpl=+grip_ghost			local
template	ghost_tpl2=+xhairhit			local
thing		dummy=-1						local
thing		potential						local
int			active							local

int			old_flags						local

message     startup
message     activated
message     deactivated
message     pulse
message     newplayer
message     killed
message     deselected
message     selected

end

# ========================================================================================

code

startup:
	player = GetLocalPlayerThing();
	debris = -1;
	changing = 0;
	changedir = 0;
	call stop_power;
	Return;

# ........................................................................................

activated:
	if(active) return;
	active = 1;
	// Cannot use power if blinded
	if(GetActorFlags(player) & 0x800) Return;

	rank = GetInv(player, 30);
	
	debris = -1;
	call find_debris;
	if(debris != -1)
		SetInvActivated(player, 30, 1);
	SetPulse(0.1);
	range = 0.5;

	Return;

# ........................................................................................

pulse:
	mana = GetInv(player, 14);
	if(mana < cost)
	{
		call stop_power;
		return;
	}
	if(GetActorFlags(player) & 0x800)				// if blinded, drop (not throw) the debris, and stop power
	{
		call stop_power;
		return;
	}
	if(debris == -1)								// if we don't have a debris, find one
	{
		call find_debris;
		if(debris == -1) return;					// if we still don't have one, return
		SetInvActivated(player, 30, 1);				// we just found a debris, so turn on the icon
	}
	if(GetInv(player, 64) != 1) ChangeInv(player, 14, -cost/10);
	if(0)
	{
		if(IsThingCrouching(player))	// crouching and haven't started changing distance yet
		{
			if(!changing)
			{
				changing = 1;
				changedir = 1 - changedir;
			}
		}
		else
		{
			changing = 0;
		}
		if(changing)
		{
			if(changedir == 1)				// forward
			{
				range = range + 0.05;
				if(range > 0.9) range = 0.9;
			}
			else
			{
				range = range - 0.05;
				if(range < 0.35) range = 0.35;
			}
		}
	}
	dummy = FireProjectile(player, ghost_tpl, -1, -1, VectorSet(0, range, -0.01), '0 0 0', 0, 0, 0, 0x0);
	dir = VectorScale(VectorSub(GetThingPos(dummy), GetThingPos(debris)), 4.5);
	ClearPhysicsFlags(debris, 0x41);
	DetachThing(debris);
	len = vectorlen(dir);
	if(len < 0.04) SetThingVel(debris, '0 0 0');
	else if(len < 0.15) SetThingVel(debris, VectorScale(dir, 0.7));	// slow down when close
	else SetThingVel(debris, dir);
	Return;

# ........................................................................................

deactivated:
	if((GetThingHealth(player) <= 0))
	{
		call stop_power;
		Return;
	}
	// Cannot use power if blinded
	if(GetActorFlags(player) & 0x800)
	{
		call stop_power;
		Return;
	}
	if(debris != -1)
	{
		dummy = FireProjectile(player, ghost_tpl2, -1, -1, '0 10 0.06', '0 0 0', 0, 0, 0, 0x0);
		dir = VectorSub(GetThingPos(dummy), GetThingPos(debris));
		
		if(vectorlen(dir) < 0.1 && ThingViewDot(player, debris) > 0.9)	// debris in front of player -- blocking the dummy
		{
			print("blocked");
			dummy = FireProjectile(player, ghost_tpl, -1, -1, '0 0 0', '0 0 0', 0, 0, 0, 0x0);
			dir = GetThingLVec(dummy);
		}
		DetachThing(debris);
		ApplyForce(debris, VectorScale(VectorNorm(dir), 300));
		PlayMode(player, 24);
		PlaySoundThing(throwSound, player, 1.0, -1, -1, 0x80);
		SetBinWait(player, 30, 0.4);
	}
	call stop_power;
	Return;

# ........................................................................................

selected:
	jkPrintUNIString(player, 30);
	Return;

# ........................................................................................

deselected:
	call stop_power;
	Return;

# ........................................................................................

killed:
   if(GetSenderRef() != player) Return;

newplayer:
   call stop_power;

   Return;

# ........................................................................................

stop_power:
	SetPulse(0);
	SetInvActivated(player, 30, 0);
	active = 0;
stop_debris:
	if(debris != -1) SetPhysicsFlags(debris, old_flags);	//restore gravity effects and surface attachment
	debris = -1;
	return;

find_debris:
	// Check for debris objects in view.
	maxdot = 0;
	call stop_debris;
	potential = FirstThingInView(player, 120, 7, 0x010);   // 0x010 debris
	while(potential != -1)
	{
		dot = ThingViewDot(player, potential);
		if(
			(potential != debris)
			&& (HasLOS(player, potential))
			&& (VectorDist(GetThingPos(player), GetThingPos(potential)) < (rank * 0.5 + 1))
			&& (dot > maxdot)
		)
		{
			debris = potential;
			old_flags = GetPhysicsFlags(debris);
			maxdot = dot;
		}
		potential = NextThingInView();
	}
	return;
	
end

