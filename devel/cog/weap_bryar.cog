# Jedi Knight Cog Script
#
# WEAP_BRYAR.COG
#
# WEAPON 2 Script - Bryar Pistol
#
# While the pistol retains its primary fire mode, the secondary fire features a charge-up
#  mode for a more powerful shot.  Hold the fire button longer to increase the power.
#
# Programming notes:
# -The int (boolean) variable "charging" is used to determine if the fire2 button has been
#  pressed.  For example, if we detonate the sequencers with fire 2 in the sequencer cog,
#  the deactivated message is called in the cog for the weapon that is mounted.
#  This variable guarantees that the fire2 charge code in this cog will not be executed
#  unless fire2 was actually activated in this cog, and not somewhere else. [8/25]
#
# [darthslaw]
#
# (C) 2006 JK ReCog


symbols

model       povModel=bryv.3do                   local
model       weaponMesh=bryg.3do                 local

keyframe    mountAnim=bryvmnt.key               local
keyframe    dismountAnim=bryvdis.key            local
keyframe    povfireAnim=bryvpst1.key            local
keyframe    holsterAnim=kyhlstr.key             local
keyframe	povsmackanim=bryvsmack.key			local
keyframe	smackanim=kybrysmack.key			local

sound       outSound=pistout1.wav               local
sound       mountSound=df_bry_ready.wav         local
sound       dismountSound=PutWeaponAway01.wav   local
sound       fireSound=pistol-1.wav              local
sound		fireSound2=SwingFist04.wav			local

#template    projectile=+bryarbolt               local

thing       player                              local

flex        fireWait=0.5                        local
flex        holsterWait                         local
flex        powerBoost                          local
#flex        autoAimFOV=30                       local

int         trackID=-1                          local
#int         dummy=0                             local
int         mode                                local
int         holsterTrack                        local

int			channel=-1							local
int			inv									local
flex		delayTime							local
sound       chargeSound=BCChargeUp.wav          local
int			charging							local
int			charge								local

int			xhair_bin=119						local

flex		err									local

int			firing=0							local

int			waggle=0				local
vector		waggle_vec				local
flex		waggle_spd				local

message		startup
message		killed
message		newplayer
message     activated
message     deactivated
message     selected
message     deselected
message     autoselect
message     fire
message     timer
message		user2					# for Fire 3 'activated'
#message		user3					# for fire 3 'deactivated'
message		user4					# for waggle control

end

# ========================================================================================

code
startup:
	channel = -1;
	charging = 0;
	waggle = 0;
	firing = 0;
	return;

newplayer:
killed:
	if (player == GetSenderRef())
	{
		charging = 0;
		if(channel != -1)
		{
			StopSound(channel, 0.1);
			channel = -1;
		}
		jkSetWaggle(player, '0 0 0', 0);
		waggle = 0;
		firing = 0;
	}
	Return;
   
fire:
   player = GetSourceRef();

   // Check that the player is still alive.
   if(GetThingHealth(player) <= 0)
   {
      Return;
   }

   // Check Ammo - If we are out, autoselect best weapon.
   if(GetInv(player, 11) < 1.0)
   {
      PlaySoundThing(outSound, player, 1.0, -1.0, -1.0, 0x80);
      if(GetAutoSwitch() & 1)
         SelectWeapon(player, AutoSelectWeapon(player, 1));
      Return;
   }

   SetPOVShake('0.0 -.003 0.0', '1.0 0.0 0.0', .05, 80.0);
   
	#dummy = FireProjectile(player, projectile, fireSound, 8, '0.0135 0.1624 0.0', '0 0 0', 1.0, 0x20, autoAimFOV, autoAimFOV*2);
	PlaySoundThing(fireSound, player, 1.0, -1.0, -1.0, 0x80);
	PlayMode(player, 8);
	err = GetInv(player, xhair_bin);
	if(err > 0)
   		SendTrigger(-1, 2000, 3 * (rand() - 0.5) * err, 3 * (rand() - 0.5) * err, 1.0, 0.0);
	else
		SendTrigger(-1, 2000, 0, 0, 1.0, 0.0);
	
	ChangeInv(player, xhair_bin, 0.15);   
   ChangeInv(player, 11, -1.0);
   jkPlayPOVKey(player, povfireAnim, 1, 0x38);

   powerBoost = GetInv(player, 63);
   ChangeFireRate(player, fireWait/powerBoost);

   Return;

# ........................................................................................

activated:
   player = GetSourceRef();
   mode = GetSenderRef();

   if(GetInv(player, 11) < 1.0)
   {
      PlaySoundThing(outSound, player, 1.0, -1.0, -1.0, 0x80);
      if(GetAutoSwitch() & 1)
         SelectWeapon(player, AutoSelectWeapon(player, 1));
      Return;
   }
   jkSetWaggle(player, '0 0 0', 0);
   waggle = 0;

	if(mode == 0)
	{
		SendMessageEx(GetInvCog(player, xhair_bin), user0, 0.2, 0, 0, 0);
		charging = 0;
		powerBoost = GetInv(player, 63);
		ActivateWeapon( player, fireWait/powerBoost, mode );
	}
	else
	{
		// don't need a min error for charge up fire, since it fires only once per hold of the fire button
		// but disable any possible existing min err
		SendMessageEx(GetInvCog(player, xhair_bin), user0, 0.0, 0, 0, 0);
		charging = 1;
		ActivateWeapon(player, 0, mode);
		if(channel == -1) channel = PlaySoundThing(chargeSound, player, 0.0, -1, -1, 0x181);
		if(channel != -1)
		{
			ChangeSoundPitch(channel, 0.3, 0.01);
			SetTimerEx(0.2, 10, channel, 1);
		}
	}
   Return;

# ........................................................................................

deactivated:
   player = GetSourceRef();
   err = GetInv(player, xhair_bin);
   	waggle = 1;
	jkSetWaggle(player, waggle_vec, waggle_spd);
	SendMessageEx(GetInvCog(player, xhair_bin), user0, 0.0, 0, 0, 0);
   delayTime = DeactivateWeapon( player, mode );
   powerBoost = GetInv(player, 63);
   SetMountWait(player, fireWait/powerBoost);
   KillTimerEx(10);
	if(channel != -1)
	{
		StopSound(channel, 0);
		channel = -1;
	}
	if(!charging)		//this was not the cog that was activated
		return;

	charging = 0;
	if(mode == 1)
	{
		ChangeInv(player, xhair_bin, 1.0);
		// From Bowcaster Cog -- keeps weapon from firing if deselected while charged
		if (GetCurWeaponMode() != -1) Return;

		inv = GetInv(player, 11);
		if(delayTime > 1.5 && inv >= 4)
		{
			SetPOVShake('0.0 -.009 0.0', '4.0 0.0 0.0', .05, 80.0);
			#FireProjectile(player, projectile, fireSound, 8, '0.0135 0.1624 0.0', '0 0 0', 4.0, 0x22, autoAimFOV, autoAimFOV*2);
			charge = 4;
			ChangeInv(player, 11, -4.0);
			#print("fire level 4");
		}
		else if(delayTime > 1.0 && inv >= 3)
		{
			SetPOVShake('0.0 -.007 0.0', '3.0 0.0 0.0', .05, 80.0);
			#FireProjectile(player, projectile, fireSound, 8, '0.0135 0.1624 0.0', '0 0 0', 3.0, 0x22, autoAimFOV, autoAimFOV*2);
			charge = 3;
			ChangeInv(player, 11, -3.0);
			#print("fire level 3");
		}
		else if(delayTime > 0.5 && inv >= 2)
		{
			SetPOVShake('0.0 -.005 0.0', '2.0 0.0 0.0', .05, 80.0);
			#FireProjectile(player, projectile, fireSound, 8, '0.0135 0.1624 0.0', '0 0 0', 2.0, 0x22, autoAimFOV, autoAimFOV*2);
			charge = 2;
			ChangeInv(player, 11, -2.0);
			#print("fire level 2");
		}
		else //normal shot
		{
			SetPOVShake('0.0 -.003 0.0', '1.0 0.0 0.0', .05, 80.0);
			#FireProjectile(player, projectile, fireSound, 8, '0.0135 0.1624 0.0', '0 0 0', 1.0, 0x20, autoAimFOV, autoAimFOV*2);
			charge = 1;
			ChangeInv(player, 11, -1.0);
			#print("fire level 1");
		}
		jkPlayPOVKey(player, povfireAnim, 1, 0x38);
	}
	PlaySoundThing(fireSound, player, 1.0, -1.0, -1.0, 0x80);
	PlayMode(player, 8);
	if(err > 0)
		SendTrigger(-1, 2000, 2 * (rand() - 0.5) * err, 2 * (rand() - 0.5) * err, charge, 0.0);
	else
		SendTrigger(-1, 2000, 0, 0, charge, 0.0);
   Return;

# ........................................................................................

selected:
   player = GetSourceRef();

   // Setup the meshes and models.
   jkSetPOVModel(player, povModel);
   jkSetWeaponMesh(player, weaponMesh);
   SetArmedMode(player, 1);
	if(channel != -1)
	{
		StopSound(channel, 0);
		channel = -1;
	}
   // Play mounting sound.
   PlayMode(player, 41);
   PlaySoundThing(mountSound, player, 1.0, -1.0, -1.0, 0x80);

   // Play the animation (NOLOOP + UNIQUE + ENDPAUSE).
   // The animation is held at the last frame after it is played.
   trackID = jkPlayPOVKey(player, mountAnim, 0, 0x14);
	waggle = 1;
	jkSetWaggle(player, waggle_vec, waggle_spd);
	SendMessageEx(GetInvCog(player, xhair_bin), user0, 0.0, 0, 0, 0);
	firing = 1;
	#print("Bryar: Fire 3 disabled");
	SetTimerEx(0.3, 3, 0, 0);	// set a timer to allow special fire
	charging = 0;

   // Clear saber flags, and allow activation of the weapon
   jkClearFlags(player, 0x5);
   SetCurWeapon(player, 2);
   SetMountWait(player, GetKeyLen(mountAnim));

   Return;

# ........................................................................................

deselected:
   player = GetSourceRef();
   
   PlaySoundThing(dismountSound, player, 1.0, -1, -1, 0x80);
   jkPlayPOVKey(player, dismountAnim, 0, 0x18);
   
   firing = 1;	// not really firing, but keep fire3 from activating
   #print("Bryar: Fire 3 disabled");
   charging = 0;
   
   holsterWait = GetKeyLen(holsterAnim);
   SetMountWait(player, holsterWait);
   holsterTrack = PlayKey(player, holsterAnim, 1, 0x4);
   SetTimerEx(holsterWait, 2, 0.0, 0.0);
   if (trackID != -1)
   {
      jkStopPOVKey(player, trackID, 0);
      trackID = -1;
   }
   jkSetWaggle(player, '0 0 0', 0);
   waggle = 0;
	KillTimerEx(10);
	if(channel != -1)
	{
		StopSound(channel, 0);
		channel = -1;
	}

   Return;

# ........................................................................................

autoselect:
   player = GetSourceRef();

   // If the player has the weapon
   if(GetInv(player, 2) != 0.0)
   {
      // If the player has ammo
      if(GetInv(player, 11) != 0.0)
      {
         ReturnEx(500.0);
      }
      else
      {
         ReturnEx(-1.0);
      }
   }
   else
   {
      ReturnEx(-1.0);
   }

   Return;

# ........................................................................................

timer:
	if(GetSenderID() == 2)
	{
		StopKey(player, holsterTrack, 0.0);
		return;
	}
	if(GetSenderID() == 3)
	{
		firing = 0;
		#print("Bryar: Fire 3 enabled");
		return;
	}
	if(GetSenderID() == 10)
	{
		if(GetParam(1) == 1)
		{
			ChangeSoundVol(GetParam(0), 1.0, 0.6);
			//different pitches based on how much ammo we have
			inv = GetInv(player, 11);
			if(inv >= 4) ChangeSoundPitch(GetParam(0), 1.15, 2.0);
			else if(inv >= 3) ChangeSoundPitch(GetParam(0), 1.0, 1.5);
			else if(inv >= 2) ChangeSoundPitch(GetParam(0), 0.85, 1.0);
			else ChangeSoundPitch(GetParam(0), 0.7, 0.5);
		}
		return;
	}
	if(GetSenderID() == 20)
	{
		SendTrigger(-1, 2001, 0, 0, 0, 0);	// fire bryar smack template
		return;
	}
	Return;

user2:
	if(firing) return;
	player = GetLocalPlayerThing();
	firing = 1;
	jkPlayPOVKey(player, povsmackanim, 3, 0xA);	// No Loop + Restart if playing already
	PlayKey(player, smackanim, 2, 0xA);
	PlaySoundThing(fireSound2, player, 1.0, -1.0, -1.0, 0x80);
	SetTimerEx(0.2, 20, 0, 0);						// small delay before firing projectile
	SetTimerEx(0.6, 3, 0, 0);						// a delay before we can smack again
	SetMountWait(player, 0.7);						// a delay before we can change weapons
	SetFireWait(player, 0.7);						// a delay before we can shoot again
	powerBoost = GetInv(player, 63);				// do we have a power boost?
	ChangeFireRate(player, FireWait/powerBoost);	// counteract the effect that SetFireWait has on the fire rate
	Return;

#user3:
#	print("BRYAR COG: USER 3 MESSAGE ACTIVATED");
#	SetTimerEx(FireWait, 3, 0, 0);
#	Return;

user4:
	waggle_vec = VectorSet(GetParam(0), GetParam(1), GetParam(2));
	waggle_spd = GetParam(3);
	if(waggle) jkSetWaggle(player, waggle_vec, waggle_spd);
	Return;

end
